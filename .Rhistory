marital_model <- svyglm(
bmi_category_nr_ob ~ marital_status,
design = svy_dataset,
family = binomial()
)
summary(marital_model)
tab_model(marital_model)
# Education Model
education_model <- svyglm(
bmi_category_nr_ob ~ edu_cat,
design = svy_dataset,
family = binomial()
)
summary(education_model)
tab_model(education_model)
# Wealth Model
wealth_model <- svyglm(
bmi_category_nr_ob ~ wealth_cat,
design = svy_dataset,
family = binomial()
)
summary(wealth_model)
tab_model(wealth_model)
# Urban/Rural Model
urban_model <- svyglm(
bmi_category_nr_ob ~ hv025,
design = svy_dataset,
family = binomial()
)
summary(urban_model)
tab_model(urban_model)
# High Blood Pressure Model
bp_model <- svyglm(
bmi_category_nr_ob ~ high_blood_pressure,
design = svy_dataset,
family = binomial()
)
summary(bp_model)
tab_model(bp_model)
# Ecological Region Model
region_model <- svyglm(
bmi_category_nr_ob ~ shecoreg,
design = svy_dataset,
family = binomial()
)
summary(region_model)
tab_model(region_model)
# Optional: Save all models in a list for easier handling
univariate_models <- list(
sex = sex_model,
age = age_model,
marital = marital_model,
education = education_model,
wealth = wealth_model,
urban = urban_model,
bp = bp_model,
region = region_model
)
# Optional: Create a summary table of all models
tab_model(
sex_model, age_model, marital_model, education_model,
wealth_model, urban_model, bp_model, region_model,
show.aic = TRUE,
show.r2 = TRUE,
dv.labels = c("Sex", "Age", "Marital", "Education",
"Wealth", "Urban/Rural", "Blood Pressure", "Region")
)
# Optional: Function to extract key statistics from all models
get_model_stats <- function(model) {
summary_stats <- summary(model)
aic <- AIC(model)
null_dev <- model$null.deviance
res_dev <- model$deviance
mcfadden_r2 <- 1 - (res_dev / null_dev)
return(list(
AIC = aic,
McFadden_R2 = mcfadden_r2,
Null_Deviance = null_dev,
Residual_Deviance = res_dev
))
}
# Apply function to all models
model_statistics <- lapply(univariate_models, get_model_stats)
# Print model comparison statistics
print(model_statistics)
#
# HTN ordinal logistic regression model with survey weights
htn_model <-  svyglm(high_blood_pressure ~
hv104 +
age_cat +
marital_status +
bmi_category_nr_ob +
edu_cat +
wealth_cat +
hv025 +
#hv024+
shecoreg,
design = svy_dataset,
family = binomial())
vif(htn_model)
summary(htn_model)
tab_model(htn_model)
#===================================================
# univariate model for HTN
# Sex Model for HTN
sex_model_htn <- svyglm(
high_blood_pressure ~ hv104,
design = svy_dataset,
family = binomial()
)
summary(sex_model_htn)
tab_model(sex_model_htn)
# Age Model for HTN
age_model_htn <- svyglm(
high_blood_pressure ~ age_cat,
design = svy_dataset,
family = binomial()
)
summary(age_model_htn)
tab_model(age_model_htn)
# Marital Status Model for HTN
marital_model_htn <- svyglm(
high_blood_pressure ~ marital_status,
design = svy_dataset,
family = binomial()
)
summary(marital_model_htn)
tab_model(marital_model_htn)
# BMI Model for HTN
bmi_model_htn <- svyglm(
high_blood_pressure ~ bmi_category_nr_ob,
design = svy_dataset,
family = binomial()
)
summary(bmi_model_htn)
tab_model(bmi_model_htn)
tab_model(marital_model_htn)
# BMI Model for HTN
bmi_model_htn <- svyglm(
high_blood_pressure ~ bmi_category_nr_ob,
design = svy_dataset,
family = binomial()
)
summary(bmi_model_htn)
tab_model(bmi_model_htn)
# Education Model for HTN
education_model_htn <- svyglm(
high_blood_pressure ~ edu_cat,
design = svy_dataset,
family = binomial()
)
summary(education_model_htn)
tab_model(education_model_htn)
# Marital Status Model for HTN
marital_model_htn <- svyglm(
high_blood_pressure ~ marital_status,
design = svy_dataset,
family = binomial()
)
summary(marital_model_htn)
tab_model(marital_model_htn)
# Education Model for HTN
education_model_htn <- svyglm(
high_blood_pressure ~ edu_cat,
design = svy_dataset,
family = binomial()
)
summary(education_model_htn)
tab_model(education_model_htn)
# Wealth Model for HTN
wealth_model_htn <- svyglm(
high_blood_pressure ~ wealth_cat,
design = svy_dataset,
family = binomial()
)
summary(wealth_model_htn)
tab_model(wealth_model_htn)
# Urban/Rural Model for HTN
urban_model_htn <- svyglm(
high_blood_pressure ~ hv025,
design = svy_dataset,
family = binomial()
)
summary(urban_model_htn)
tab_model(urban_model_htn)
# Region Model for HTN
region_model_htn <- svyglm(
high_blood_pressure ~ shecoreg,
design = svy_dataset,
family = binomial()
)
summary(region_model_htn)
tab_model(region_model_htn)
df <- read_rds(here("data_selected_gis_new.rds"))
table(df$high_blood_pressure)
df <- df %>%
mutate(forcats::as_factor(df)) %>%
mutate(weight = as.numeric(sample_wt),
psu = as.numeric(hv021))
Packages <- c("sf", "here","gtsummary","foreign","survey",'labelled',"readxl",
"tidyverse", "haven","rockchalk", "forcats", "nnet",
"psycho", "sjPlot")
new_packages <- Packages[!(Packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages, dependencies = T)
#load libraries
lapply(Packages, require, character.only=T)
df <- read_rds(here("data_selected_gis_new.rds"))
table(df$high_blood_pressure)
library(stats)
# Function for formatted Chi-square test results
format_chi_square <- function(test_result) {
return(paste0("χ2(", test_result$parameter, ") = ",
round(test_result$statistic, 2),
", p ", ifelse(test_result$p.value < 0.001, "< 0.001",
paste0("= ", round(test_result$p.value, 3)))))
}
# Function for formatted t-test results
format_t_test <- function(test_result) {
return(paste0("t(", round(test_result$parameter, 1), ") = ",
round(test_result$statistic, 2),
", p ", ifelse(test_result$p.value < 0.001, "< 0.001",
paste0("= ", round(test_result$p.value, 3)))))
}
# Categorical Variables Tests (Chi-square)
# Sex (hv104)
sex_test <- svychisq(~high_blood_pressure + hv104, design = svy_dataset)
print("Sex distribution:")
print(format_chi_square(sex_test))
# Categorical Variables Tests (Chi-square)
# Sex (hv104)
sex_test <- svychisq(~high_blood_pressure + hv104, design = svy_dataset)
df <- df %>%
mutate(forcats::as_factor(df)) %>%
mutate(weight = as.numeric(sample_wt),
psu = as.numeric(hv021))
#Creating the survey design object
svy_dataset <- svydesign(
ids = ~psu,
weights = ~weight,
data = df,
nest = TRUE
)
svy_dataset$variables$high_blood_pressure <- as.factor(svy_dataset$variables$high_blood_pressure)
svy_dataset$variables$blood_pressure_cat_numeric <- as.factor(svy_dataset$variables$blood_pressure_cat_numeric)
# Categorical Variables Tests (Chi-square)
# Sex (hv104)
sex_test <- svychisq(~high_blood_pressure + hv104, design = svy_dataset)
print("Sex distribution:")
print(format_chi_square(sex_test))
# Age categories
age_test <- svychisq(~high_blood_pressure + age_cat, design = svy_dataset)
print("Age category distribution:")
print(format_chi_square(age_test))
# Marital status
marital_test <- svychisq(~high_blood_pressure + marital_status, design = svy_dataset)
print("Marital status distribution:")
print(format_chi_square(marital_test))
# Education
education_test <- svychisq(~high_blood_pressure + edu_cat, design = svy_dataset)
print("Education distribution:")
print(format_chi_square(education_test))
# Wealth category
wealth_test <- svychisq(~high_blood_pressure + wealth_cat, design = svy_dataset)
print("Wealth distribution:")
print(format_chi_square(wealth_test))
# Urban/Rural
urban_test <- svychisq(~high_blood_pressure + hv025, design = svy_dataset)
print("Urban/Rural distribution:")
print(format_chi_square(urban_test))
# Region
region_test <- svychisq(~high_blood_pressure + shecoreg, design = svy_dataset)
print("Region distribution:")
print(format_chi_square(region_test))
# BMI category
bmi_test <- svychisq(~high_blood_pressure + bmi_category_nr_ob, design = svy_dataset)
print("BMI category distribution:")
print(format_chi_square(bmi_test))
# Create a summary table of all chi-square tests
chi_square_results <- data.frame(
Variable = c("Sex", "Age Category", "Marital Status", "Education",
"Wealth", "Urban/Rural", "Region", "BMI Category"),
Test_Statistic = c(
sex_test$statistic,
age_test$statistic,
marital_test$statistic,
education_test$statistic,
wealth_test$statistic,
urban_test$statistic,
region_test$statistic,
bmi_test$statistic
),
DF = c(
sex_test$parameter,
age_test$parameter,
marital_test$parameter,
education_test$parameter,
wealth_test$parameter,
urban_test$parameter,
region_test$parameter,
bmi_test$parameter
),
P_Value = c(
sex_test$p.value,
age_test$p.value,
marital_test$p.value,
education_test$p.value,
wealth_test$p.value,
urban_test$p.value,
region_test$p.value,
bmi_test$p.value
)
)
# Format the results table
chi_square_results$Test_Statistic <- round(chi_square_results$Test_Statistic, 2)
chi_square_results$P_Value <- ifelse(chi_square_results$P_Value < 0.001,
"< 0.001",
round(chi_square_results$P_Value, 3))
# Print formatted results table
print("Summary of Chi-square Tests:")
print(chi_square_results)
return(paste0("χ2(", round(test_result$parameter, 2), ") = ",
round(test_result$statistic, 2),
", p ", ifelse(test_result$p.value < 0.001, "< 0.001",
paste0("= ", round(test_result$p.value, 3)))))
# Function for formatted Chi-square test results
format_chi_square <- function(test_result) {
return(paste0("χ2(", round(test_result$parameter, 2), ") = ",
round(test_result$statistic, 2),
", p ", ifelse(test_result$p.value < 0.001, "< 0.001",
paste0("= ", round(test_result$p.value, 3)))))
}
# Perform Chi-square tests with survey design for BMI
sex_test <- svychisq(~bmi_category_nr_ob + hv104, design = svy_dataset)
age_test <- svychisq(~bmi_category_nr_ob + age_cat, design = svy_dataset)
marital_test <- svychisq(~bmi_category_nr_ob + marital_status, design = svy_dataset)
education_test <- svychisq(~bmi_category_nr_ob + edu_cat, design = svy_dataset)
wealth_test <- svychisq(~bmi_category_nr_ob + wealth_cat, design = svy_dataset)
urban_test <- svychisq(~bmi_category_nr_ob + hv025, design = svy_dataset)
region_test <- svychisq(~bmi_category_nr_ob + shecoreg, design = svy_dataset)
htn_test <- svychisq(~bmi_category_nr_ob + high_blood_pressure, design = svy_dataset)
# Create results table for BMI
chi_square_results_bmi <- data.frame(
Variable = c("Sex", "Age Category", "Marital Status", "Education",
"Wealth", "Urban/Rural", "Region", "Hypertension"),
Test_Statistic = round(c(
sex_test$statistic,
age_test$statistic,
marital_test$statistic,
education_test$statistic,
wealth_test$statistic,
urban_test$statistic,
region_test$statistic,
htn_test$statistic
), 2),
DF = round(c(
sex_test$parameter,
age_test$parameter,
marital_test$parameter,
education_test$parameter,
wealth_test$parameter,
urban_test$parameter,
region_test$parameter,
htn_test$parameter
), 2),
P_Value = c(
sex_test$p.value,
age_test$p.value,
marital_test$p.value,
education_test$p.value,
wealth_test$p.value,
urban_test$p.value,
region_test$p.value,
htn_test$p.value
)
)
# Format p-values
chi_square_results_bmi$P_Value <- ifelse(chi_square_results_bmi$P_Value < 0.001,
"< 0.001",
round(chi_square_results_bmi$P_Value, 3))
# Print clean, formatted results
print("Chi-square test results for BMI associations:")
print(chi_square_results_bmi)
# Optionally, write to CSV
write.csv(chi_square_results_bmi, "chi_square_results_bmi.csv", row.names = FALSE)
sqrt(chi_sq / (n * (min_dim - 1)))
# Optionally, write to CSV
write.csv(chi_square_results_bmi, "chi_square_results_bmi.csv", row.names = FALSE)
# Create a function to calculate Cramer's V for survey data
cramers_v <- function(chi_sq, n, min_dim) {
sqrt(chi_sq / (n * (min_dim - 1)))
}
# Optional: Create a combined table with results for both outcomes
combined_results <- rbind(
data.frame(Outcome = "Hypertension", chi_square_results),
data.frame(Outcome = "BMI", chi_square_results_bmi)
)
print("\nCombined results for both outcomes:")
print(combined_results)
# Function for formatted Chi-square test results
format_chi_square <- function(test_result) {
return(paste0("χ2(", test_result$parameter, ") = ",
round(test_result$statistic, 2),
", p ", ifelse(test_result$p.value < 0.001, "< 0.001",
paste0("= ", round(test_result$p.value, 3)))))
}
# Function for formatted t-test results
format_t_test <- function(test_result) {
return(paste0("t(", round(test_result$parameter, 1), ") = ",
round(test_result$statistic, 2),
", p ", ifelse(test_result$p.value < 0.001, "< 0.001",
paste0("= ", round(test_result$p.value, 3)))))
}
# Categorical Variables Tests (Chi-square)
# Load required libraries
library(survey)
library(stats)
# Categorical Variables Tests (Chi-square)
# Perform Chi-square tests for Hypertension
htn_sex_test <- svychisq(~high_blood_pressure + hv104, design = svy_dataset)
htn_age_test <- svychisq(~high_blood_pressure + age_cat, design = svy_dataset)
htn_marital_test <- svychisq(~high_blood_pressure + marital_status, design = svy_dataset)
htn_education_test <- svychisq(~high_blood_pressure + edu_cat, design = svy_dataset)
htn_wealth_test <- svychisq(~high_blood_pressure + wealth_cat, design = svy_dataset)
htn_urban_test <- svychisq(~high_blood_pressure + hv025, design = svy_dataset)
htn_region_test <- svychisq(~high_blood_pressure + shecoreg, design = svy_dataset)
htn_bmi_test <- svychisq(~high_blood_pressure + bmi_category_nr_ob, design = svy_dataset)
# Perform Chi-square tests for BMI
bmi_sex_test <- svychisq(~bmi_category_nr_ob + hv104, design = svy_dataset)
bmi_age_test <- svychisq(~bmi_category_nr_ob + age_cat, design = svy_dataset)
bmi_marital_test <- svychisq(~bmi_category_nr_ob + marital_status, design = svy_dataset)
bmi_education_test <- svychisq(~bmi_category_nr_ob + edu_cat, design = svy_dataset)
bmi_wealth_test <- svychisq(~bmi_category_nr_ob + wealth_cat, design = svy_dataset)
bmi_urban_test <- svychisq(~bmi_category_nr_ob + hv025, design = svy_dataset)
bmi_region_test <- svychisq(~bmi_category_nr_ob + shecoreg, design = svy_dataset)
bmi_htn_test <- svychisq(~bmi_category_nr_ob + high_blood_pressure, design = svy_dataset)
# Create clean combined results table
clean_combined_results <- data.frame(
Outcome = c(rep("Hypertension", 8), rep("BMI", 8)),
Variable = c("Sex", "Age Category", "Marital Status", "Education",
"Wealth", "Urban/Rural", "Region", "BMI Category",
"Sex", "Age Category", "Marital Status", "Education",
"Wealth", "Urban/Rural", "Region", "Hypertension"),
Test_Statistic = round(c(
# Hypertension results
htn_sex_test$statistic,
htn_age_test$statistic,
htn_marital_test$statistic,
htn_education_test$statistic,
htn_wealth_test$statistic,
htn_urban_test$statistic,
htn_region_test$statistic,
htn_bmi_test$statistic,
# BMI results
bmi_sex_test$statistic,
bmi_age_test$statistic,
bmi_marital_test$statistic,
bmi_education_test$statistic,
bmi_wealth_test$statistic,
bmi_urban_test$statistic,
bmi_region_test$statistic,
bmi_htn_test$statistic
), 2),
DF = round(c(
# Hypertension results
htn_sex_test$parameter,
htn_age_test$parameter,
htn_marital_test$parameter,
htn_education_test$parameter,
htn_wealth_test$parameter,
htn_urban_test$parameter,
htn_region_test$parameter,
htn_bmi_test$parameter,
# BMI results
bmi_sex_test$parameter,
bmi_age_test$parameter,
bmi_marital_test$parameter,
bmi_education_test$parameter,
bmi_wealth_test$parameter,
bmi_urban_test$parameter,
bmi_region_test$parameter,
bmi_htn_test$parameter
), 2),
P_Value = c(
# Hypertension results
htn_sex_test$p.value,
htn_age_test$p.value,
htn_marital_test$p.value,
htn_education_test$p.value,
htn_wealth_test$p.value,
htn_urban_test$p.value,
htn_region_test$p.value,
htn_bmi_test$p.value,
# BMI results
bmi_sex_test$p.value,
bmi_age_test$p.value,
bmi_marital_test$p.value,
bmi_education_test$p.value,
bmi_wealth_test$p.value,
bmi_urban_test$p.value,
bmi_region_test$p.value,
bmi_htn_test$p.value
)
)
# Format p-values
clean_combined_results$P_Value <- ifelse(clean_combined_results$P_Value < 0.001,
"< 0.001",
round(clean_combined_results$P_Value, 3))
# Print clean results
print(clean_combined_results)
# Optionally, write to CSV
write.csv(clean_combined_results, "clean_combined_results.csv", row.names = FALSE)
print(clean_combined_results)
