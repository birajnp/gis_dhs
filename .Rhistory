bmi_edu_model <- svyolr(bmi_category ~ edu_cat, design = svy_dataset)
summary(bmi_edu_model)
# 5. Wealth categories
bmi_wealth_model <- svyolr(bmi_category ~ wealth_cat, design = svy_dataset)
summary(bmi_wealth_model)
# 6. Urban/Rural (hv025)
bmi_urban_model <- svyolr(bmi_category ~ hv025, design = svy_dataset)
summary(bmi_urban_model)
# 7. Ecological region
bmi_region_model <- svyolr(bmi_category ~ shecoreg, design = svy_dataset)
summary(bmi_region_model)
# Function to extract odds ratios and confidence intervals
get_or_ci <- function(model) {
coef <- coef(model)
se <- sqrt(diag(vcov(model)))
ci_lower <- exp(coef - 1.96 * se)
ci_upper <- exp(coef + 1.96 * se)
or <- exp(coef)
results <- data.frame(
OR = or,
CI_Lower = ci_lower,
CI_Upper = ci_upper
)
return(results)
}
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
# Function to calculate Nagelkerke R2
nagelkerke_r2 <- function(model) {
# Get log-likelihood of the fitted model
ll.full <- logLik(model)[1]
# Get log-likelihood of the null model
null.model <- svyolr(bmi_category ~ 1, design = svy_dataset)
ll.null <- logLik(null.model)[1]
# Calculate R2
n <- sum(weights(model$survey.design))
r2 <- 1 - exp((2/n) * (ll.null - ll.full))
r2.adj <- r2 / (1 - exp((2/n) * ll.null))
return(r2.adj)
}
# Calculate R2 for each model
r2_results <- data.frame(
Variable = c("Sex", "Age", "Marital Status", "Education", "Wealth", "Urban/Rural", "Region"),
R2 = c(
nagelkerke_r2(bmi_sex_model),
nagelkerke_r2(bmi_age_model),
nagelkerke_r2(bmi_marital_model),
nagelkerke_r2(bmi_edu_model),
nagelkerke_r2(bmi_wealth_model),
nagelkerke_r2(bmi_urban_model),
nagelkerke_r2(bmi_region_model)
)
)
# Calculate R2 for each model
r2_results <- data.frame(
Variable = c("Sex", "Age", "Marital Status", "Education", "Wealth", "Urban/Rural", "Region"),
R2 = c(
nagelkerke_r2(bmi_sex_model),
nagelkerke_r2(bmi_age_model),
nagelkerke_r2(bmi_marital_model),
nagelkerke_r2(bmi_edu_model),
nagelkerke_r2(bmi_wealth_model),
nagelkerke_r2(bmi_urban_model),
nagelkerke_r2(bmi_region_model)
)
)
ci_lower <- exp(coef - 1.96 * se)
# Function to extract odds ratios and confidence intervals
get_or_ci <- function(model) {
coef <- coef(model)
se <- sqrt(diag(vcov(model)))
ci_lower <- exp(coef - 1.96 * se)
ci_upper <- exp(coef + 1.96 * se)
or <- exp(coef)
results <- data.frame(
OR = or,
CI_Lower = ci_lower,
CI_Upper = ci_upper
)
return(results)
}
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
# Function to calculate McFadden's pseudo R² for survey-weighted models
survey_pseudo_r2 <- function(model) {
# Extract the model object
full_model <- model$fit
# Fit null model
null_formula <- as.formula(paste(all.vars(model$terms)[1], "~ 1"))
null_model <- svyolr(null_formula, design = model$survey.design)$fit
# Calculate McFadden's pseudo R²
r2 <- 1 - (full_model$deviance / null_model$deviance)
return(r2)
}
# Fit univariate models
models_list <- list(
Sex = svyolr(bmi_category ~ hv104, design = svy_dataset),
Age = svyolr(bmi_category ~ age_cat, design = svy_dataset),
`Marital Status` = svyolr(bmi_category ~ marital_status, design = svy_dataset),
Education = svyolr(bmi_category ~ edu_cat, design = svy_dataset),
Wealth = svyolr(bmi_category ~ wealth_cat, design = svy_dataset),
`Urban/Rural` = svyolr(bmi_category ~ hv025, design = svy_dataset),
Region = svyolr(bmi_category ~ shecoreg, design = svy_dataset)
)
# Calculate pseudo R² for each model
r2_results <- data.frame(
Variable = names(models_list),
R2 = sapply(models_list, survey_pseudo_r2)
)
# Get odds ratios and CIs for each model
or_results <- lapply(models_list, get_survey_or)
# Function to extract odds ratios and CIs for survey-weighted models
get_survey_or <- function(model) {
coef <- coef(model)
se <- sqrt(diag(vcov(model)))
or <- exp(coef)
ci_lower <- exp(coef - 1.96 * se)
ci_upper <- exp(coef + 1.96 * se)
results <- data.frame(
Predictor = names(coef),
OR = round(or, 3),
CI_Lower = round(ci_lower, 3),
CI_Upper = round(ci_upper, 3)
)
return(results)
}
# Get odds ratios and CIs for each model
or_results <- lapply(models_list, get_survey_or)
# Print odds ratios and CIs for each model
for(i in seq_along(or_results)) {
cat("\nOdds Ratios for", names(models_list)[i], ":\n")
print(or_results[[i]])
}
# Calculate Wald tests for overall significance
wald_tests <- lapply(models_list, function(model) {
regTermTest(model, ~1)
})
# Add p-values to results
r2_results$p_value <- sapply(wald_tests, function(x) x$p)
# Add p-values to results
r2_results$p_value <- sapply(wald_tests, function(x) x$p)
r2_results$p_value <- round(r2_results$p_value, 4)
# Calculate Wald tests for overall significance
wald_tests <- lapply(models_list, function(model) {
regTermTest(model, ~1)
})
# Add p-values to results
r2_results$p_value <- sapply(wald_tests, function(x) x$p)
r2_results$p_value <- round(r2_results$p_value, 4)
# Print final results with both R² and p-values
print(r2_results)
# Calculate Wald tests for overall significance
wald_tests <- lapply(models_list, function(model) {
regTermTest(model, ~1)
})
# Function to extract odds ratios and confidence intervals
get_or_ci <- function(model) {
coef <- coef(model)
se <- sqrt(diag(vcov(model)))
ci_lower <- exp(coef - 1.96 * se)
ci_upper <- exp(coef + 1.96 * se)
or <- exp(coef)
results <- data.frame(
OR = or,
CI_Lower = ci_lower,
CI_Upper = ci_upper
)
return(results)
}
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or + age_or)
print(sex_or, age_or)
print(sex_or)
# Function to extract odds ratios and confidence intervals
get_or_ci <- function(model) {
#coef matrix
coef_matrix1<- round(coef(summary(model)),3)
# Calculate p value
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = F) * 2
# odds calculation
or1 <- round(coef(model),2)
#calculating ci
ci <- round(confint(model), 2)
result_bmi <- cbind(round(exp(cbind(OR = or1, ci)), 2), "p-value"=round(p_bmi,3))
return(results)
}
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
return(results_bmi)
# Function to extract odds ratios and confidence intervals
get_or_ci <- function(model) {
#coef matrix
coef_matrix1<- round(coef(summary(model)),3)
# Calculate p value
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = F) * 2
# odds calculation
or1 <- round(coef(model),2)
#calculating ci
ci <- round(confint(model), 2)
result_bmi <- cbind(round(exp(cbind(OR = or1, ci)), 2), "p-value"=round(p_bmi,3))
return(results_bmi)
}
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
# Function to extract odds ratios and confidence intervals
get_or_ci <- function(model) {
# Get coefficient matrix with std errors and t values
coef_matrix1 <- coef(summary(model))
# Calculate p value (using t values from summary)
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = FALSE) * 2
# Get coefficients
or1 <- coef(model)
# Calculate confidence intervals
# For survey models, we need to calculate CIs using standard errors
se <- sqrt(diag(vcov(model)))
ci_lower <- or1 - (1.96 * se)
ci_upper <- or1 + (1.96 * se)
ci <- cbind(ci_lower, ci_upper)
# Exponentiate coefficients and CIs for odds ratios
result <- cbind(
round(exp(cbind(
OR = or1,
"2.5 %" = ci[,1],
"97.5 %" = ci[,2]
)), 2),
"p-value" = round(p_bmi, 3)
)
return(result)
}
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
print(table_1, n = 50)
print(sex_or)
summary(sex_or)
summary(bmi_sex_model)
vcov(model)
vcov(bmi_age_model)
# Function to print results in a more readable format
print_or_results <- function(model) {
results <- get_or_ci(model)
# Add row names to indicate which are intercepts
n_intercepts <- length(model$lev) - 1
# Create better row names
if(n_intercepts > 0) {
cat("\nThresholds (Intercepts):\n")
print(results[1:n_intercepts, ])
if(nrow(results) > n_intercepts) {
cat("\nOdds Ratios for Predictors:\n")
print(results[(n_intercepts+1):nrow(results), ])
}
}
}
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- print_or_results(bmi_sex_model)
print(sex_or)
# Function to extract odds ratios, confidence intervals, and intercepts
get_or_ci <- function(model) {
# Get all coefficients including intercepts
coef_matrix1 <- coef(summary(model))
# Calculate p values
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = FALSE) * 2
# Get all coefficients (both intercepts and predictors)
or1 <- coef_matrix1[, "Value"]
# Get standard errors
se <- coef_matrix1[, "Std. Error"]
# Calculate confidence intervals
ci_lower <- or1 - (1.96 * se)
ci_upper <- or1 + (1.96 * se)
# Exponentiate everything
result <- cbind(
round(exp(cbind(
OR = or1,
"2.5 %" = ci_lower,
"97.5 %" = ci_upper
)), 2),
"p-value" = round(p_bmi, 3)
)
return(result)
}
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
# Function to extract odds ratios, confidence intervals, and intercepts
get_or_ci <- function(model) {
# Get all coefficients including intercepts
coef_matrix1 <- coef(summary(model))
# Calculate p values
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = FALSE) * 2
# Get all coefficients (both intercepts and predictors)
or1 <- coef_matrix1[, "Value"]
# Get standard errors
se <- coef_matrix1[, "Std. Error"]
# Calculate confidence intervals
ci_lower <- or1 - (1.96 * se)
ci_upper <- or1 + (1.96 * se)
# Exponentiate everything
result <- cbind(
round(exp(cbind(
OR = or1,
"2.5 %" = ci_lower,
"97.5 %" = ci_upper
)), 2),
"p-value" = round(p_bmi, 3)
)
return(result)
}
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
# Function to extract odds ratios, confidence intervals, and parameter type
get_or_ci <- function(model) {
# Get all coefficients including intercepts
coef_matrix1 <- coef(summary(model))
# Calculate p values
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = FALSE) * 2
# Get all coefficients
or1 <- coef_matrix1[, "Value"]
# Get standard errors
se <- coef_matrix1[, "Std. Error"]
# Calculate confidence intervals
ci_lower <- or1 - (1.96 * se)
ci_upper <- or1 + (1.96 * se)
# Create parameter type column
param_type <- ifelse(grepl("\\|", rownames(coef_matrix1)), "Intercept", "Predictor")
# Combine all results
result <- cbind(
"Type" = param_type,
round(exp(cbind(
OR = or1,
"2.5 %" = ci_lower,
"97.5 %" = ci_upper
)), 2),
"p-value" = round(p_bmi, 3)
)
return(result)
}
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
summary(bmi_sex_model)
summary(bmi_sex_model)
vcov(bmi_age_model)
summary(bmi_sex_model)
vcov(bmi_age_model)
# Function to extract odds ratios, confidence intervals, and parameter type
get_or_ci <- function(model) {
# Get all coefficients including intercepts
coef_matrix1 <- coef(summary(model))
# Calculate p values
p_bmi <- pnorm(abs(coef_matrix1[, "t value"]), lower.tail = FALSE) * 2
# Get all coefficients
or1 <- coef_matrix1[, "Value"]
# Get standard errors
se <- coef_matrix1[, "Std. Error"]
# Calculate confidence intervals
ci_lower <- or1 - (1.96 * se)
ci_upper <- or1 + (1.96 * se)
# Create parameter type column
param_type <- ifelse(grepl("\\|", rownames(coef_matrix1)), "Intercept", "Predictor")
# Combine all results
result <- cbind(
"Type" = param_type,
round(exp(cbind(
OR = or1,
"2.5 %" = ci_lower,
"97.5 %" = ci_upper
)), 2),
"p-value" = round(p_bmi, 3)
)
return(result)
}
# Example usage:
# bmi_model <- svyolr(bmi_category ~ hv104, design = svy_dataset)
# odds_results <- get_or_ci(bmi_model)
# print(odds_results)
# Get odds ratios and CIs for each model
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
## Function to extract odds ratios, confidence intervals using vcov matrix
get_or_ci <- function(model) {
# Get coefficients and variance-covariance matrix
coef_matrix1 <- coef(summary(model))
vcov_matrix <- vcov(model)
# Get standard errors from diagonal of vcov matrix
se <- sqrt(diag(vcov_matrix))
# Get coefficients
or1 <- coef_matrix1[, "Value"]
# Calculate t values using proper standard errors
t_values <- or1/se
# Calculate p values
p_bmi <- 2 * pnorm(abs(t_values), lower.tail = FALSE)
# Calculate confidence intervals using proper standard errors
ci_lower <- or1 - (1.96 * se)
ci_upper <- or1 + (1.96 * se)
# Create results matrix
result_matrix <- round(exp(cbind(
OR = or1,
"2.5 %" = ci_lower,
"97.5 %" = ci_upper
)), 2)
# Add p-values
result_matrix <- cbind(result_matrix, "p-value" = round(p_bmi, 3))
# Add type
result_matrix <- cbind(
"Type" = ifelse(grepl("\\|", rownames(coef_matrix1)), "Intercept", "Predictor"),
result_matrix
)
# Convert to data frame to maintain structure
result_df <- as.data.frame(result_matrix, stringsAsFactors = FALSE)
# Convert numeric columns back to numeric
result_df[,2:5] <- apply(result_df[,2:5], 2, as.numeric)
return(result_df)
}
sex_or <- get_or_ci(bmi_sex_model)
age_or <- get_or_ci(bmi_age_model)
marital_or <- get_or_ci(bmi_marital_model)
edu_or <- get_or_ci(bmi_edu_model)
wealth_or <- get_or_ci(bmi_wealth_model)
urban_or <- get_or_ci(bmi_urban_model)
region_or <- get_or_ci(bmi_region_model)
print(sex_or)
summary(bmi_sex_model)
# 3. Marital status
bmi_marital_model <- svyolr(bmi_category ~ marital_status, design = svy_dataset)
summary(bmi_marital_model)
summary(bmi_sex_model)
vcov(bmi_sex_model)
